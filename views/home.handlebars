<div id="main-wrapper">

  <div id="top-tool-bar">
    <div id="cs-title">circuit.studio</div>
    </div>

  <div id="library-wrapper">
<!--     <div id="category-tabs"></div> -->
    <div class="component" id="ph-resistor">
        <p>resistor</p>
        <svg> {{> resistor-svg}} </svg>
      </div>
    <div class="component" id="ph-capacitor">
        <p>capacitor</p>
        <svg> {{> capacitor-svg}} </svg> 
      </div>
    <div class="component" id="ph-switch">
        <p>switch</p>
      <svg> {{> switch-svg}} </svg> 
      </div>
    <div class="component" id="ph-transistor">
        <p>transistor</p>
      <svg> {{> transistor-svg}} </svg> 
      </div>
    <div class="component" id="ph-diode">
        <p>diode</p>
            <svg> {{> diode-svg}} </svg> 
      </div>
    <div class="component"></div>
    <div class="component"></div>
    <div class="component"></div>
  </div>
  <div id="grid-wrapper">

  </div>
</div>

<svg id="svg-container"  ondrop="drop(event)" ondragover="allowDrop(event)">
		<defs>
            
            {{> capacitor-svg }}
	
            {{> resistor-svg }}
            
            {{> switch-svg}}
            
            {{> transistor-svg}}
            
            {{> diode-svg}}


		</defs>

<!-- 		<use href="#capacitor"></use> -->
	</svg>
  <!-- <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js'></script> -->


    <script>
      // TODO: add all this to external script doc(s)
      // ---------------------------------------------------------------------------------------------
// Helper utilities (eventually move to helpers.js)

// helper function that returns a DOM object:

function get_one_element(name){
  return document.querySelector(name)
}

// helper function to look for the closest element via class name:

function closest(elem, selector) {
  // Borrowed from:
  // https://gomakethings.com/climbing-up-and-down-the-dom-tree-with-vanilla-javascript/
  // Element.matches() polyfill
    if (!Element.prototype.matches) {
      Element.prototype.matches =
        Element.prototype.matchesSelector ||
        Element.prototype.mozMatchesSelector ||
        Element.prototype.msMatchesSelector ||
        Element.prototype.oMatchesSelector ||
        Element.prototype.webkitMatchesSelector ||
        function(s) {
          var matches = (this.document || this.ownerDocument).querySelectorAll(s),
            i = matches.length;
          while (--i >= 0 && matches.item(i) !== this) {}
          return i > -1;
        };
    }
    // Get closest match
    for (; elem && elem !== document; elem = elem.parentNode) {
      if (elem.matches(selector)) return elem;
    }
    return null;
  }

// -------------------------------------------------------------------------------------
// Component Class Definition (eventually move to component.js)

(function(){
  //instert class definition, prototypes, and functional script
  function Component(component_name, ref_to_def){
    this.component_name = component_name || 'resistor'
    this.rot = 0
    this.el = ref_to_def.cloneNode(true)
    this.el.style.position = 'absolute'
    this.el.setAttribute('id', "clone_" + cloneNum)
    this.el.setAttribute('draggable', 'true')
    this.el.setAttribute('ondragstart', 'drag(event)')
  }

  // methods
  Component.prototype.destroy = function(){
    // remove this element from the dom
    this.el.remove()
    // TODO: remove from the list as well. Should this be here?
  }
  
  Component.prototype.resize = function(){
      this.el.style.scale = null
      // be able to resize (user input, by certain scale units)
  }

  Component.prototype.update = function(){
    this.el.style.transform = `rotate(${this.rot})`
  }

  Component.prototype.rotate = function(){
    this.rot += 90 % 360
    this.update()
  }

  // Component.prototype.

  // make it public and return a new instance
  window.Component = function(component_name, ref_to_def){
    return new Component(component_name, ref_to_def)
  }
}());

// ------------------------------
// Dragging Class definition (dragging.js ?)

let dragThing = null
let cloneNum = 0
const svg_container = get_one_element('#svg-container')
const library_wrapper = document.getElementById("library-wrapper")
const parts = {}

library_wrapper.onmousedown = function(ev){
    const placeholder_selected = closest(ev.target, '.component')
    if (placeholder_selected === null) return // end here if we don't find anything
    const this_part = placeholder_selected.getAttribute('id')
    console.log(this_part)
    const format_str = this_part.substring(3)
    console.log(format_str)
    const thing = Component(format_str, document.getElementById(format_str))
    cloneNum += 1
    console.log('new thing: ', thing)
    svg_container.appendChild(thing.el)
    parts['clone_' + (cloneNum - 1)] = thing
    console.log(parts)
    dragThing = thing
    
}


/*
    ======= CREATE & DRAG A NEW THING
            FROM OG COMPONENTS
            in #library-wrapper =======
*/

// creates an element from the library of elements
//get_one_element('.component').onmousedown = function(ev){
//  const thing = Component('resistor', get_one_element('#resistor'))
//  cloneNum += 1
//  console.log('thing: ',thing)
//  get_one_element('#svg-container').appendChild(thing.el)
//  // at to dictionary of all existing parts
//  parts['clone_' + (cloneNum - 1)] = thing
//  dragThing = thing
//  console.log(parts)
//
//}

svg_container.onmousedown = function(ev){

     // Look for the element with the class name part in ancestors of the target
  const selected = closest(ev.target, '.part')
  if (selected === null) return // End here if we don't find anything
  // Otherwise get the part from the parts object via it's id
  const part = parts[selected.getAttribute('id')]

  dragThing = part
}



// $('body').on('mousedown','.component', function(ev){
//     // const pos = $(this).position()
//     // console.log(pos)
//     // const thing = document.createElement('div')
//     const thing = Component('resistor', get_one_element('#resistor'))
//     cloneNum += 1
//     console.log('thing: ',thing)
//     // $('#main-wrapper').append(thing)
//     // $(thing).addClass('copy')
//     // $(thing).attr({id: "clone_" + cloneNum, draggable: "true", ondragstart: "drag(event)"})
//     // dragThing = thing
//     get_one_element('#svg-container').appendChild(thing)
//     dragThing = thing
//
// })

//$('#grid-wrapper').on('mousedown','.copy', function(ev){
//    const object_dragging = $(this)
//    console.log(object_dragging)
//})




let drag_king = function(ev) {

    if(dragThing === null){
        return
    }

    const x = ev.pageX;
    const y = ev.pageY;
    
    const offset_width = 72/2
    const offset_height = 20/2

    dragThing.el.style.setProperty('--x', x - offset_width)
    dragThing.el.style.setProperty('--y', y - offset_width) //for some reason width works better than height
}

window.onmousemove = drag_king;
window.onmousedown = drag_king;

window.onmouseup = function(ev) {
    dragThing = null
}


    </script>
